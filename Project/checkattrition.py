# -*- coding: utf-8 -*-
"""CheckAttrition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Lau3FB04NXnMtqU6tzHoq8iBfT9q7b31
"""

!pip install -U -q PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter

#https://drive.google.com/open?id=13lvnO78n8d5GTyWbiqfj2fRGut5oTRRg
TmPy = drive.CreateFile({'id': '13lvnO78n8d5GTyWbiqfj2fRGut5oTRRg'})
TmPy.GetContentFile('TakenPy.xlsx')

!pip install -q xlrd
import pandas as pd
df = pd.read_excel('TakenPy.xlsx')
df

exf=pd.ExcelFile("TakenPy.xlsx")
df=exf.parse("Existing employees")
df1=exf.parse("Employees who have left")

df.describe()

df1.describe()

print(df.isnull().sum())

print(df1.isnull().sum())

#checking for the job satisfaction greater then 60%
satjob=df[df["satisfaction_level"]>0.6]
print(((len(df)-len(satjob))/len(df))*100,"% People are less than 60% satisfied by job")
print(satjob["satisfaction_level"].mean())

#checking for the people who have left the job and their satisfaction
satjob1=df1[df1["satisfaction_level"]>0.6]
print(len(satjob1))
print(len(df1))
print(((len(df1)-len(satjob1))/len(df1))*100,"% People have left job when less than 60% satisfied by job")

#last evaluation check scores
checkev=df[df["last_evaluation"]>0.5]
print(((len(df)-len(checkev))/len(df))*100,"% People scored less than 50%")

#checking for the people who have left the job
checkev1=df1[df1["last_evaluation"]>0.5]
print(len(checkev1))
print(len(df1))
#people left the job despite the fact that they scored good in their evaluation
print(((len(df1)-len(checkev1))/len(df1))*100,"% left job whose score where less than 50%")

#checking the count of salary
checks=Counter(list(df["salary"]))
print(checks)
#checking for the left one
checks1=Counter(list(df1["salary"]))
print(checks1)
#can be observed that the people with less salary have left the job most

#checking the department of people
depts=dict(Counter(list(df["dept"])))
print(depts)
#checking for the change of people %
depts1=dict(Counter(list(df1["dept"])))
print(depts1)
store={}
#checking job change % wise
if len(depts)==len(depts1):
    for i in depts.keys():
        print(i,(depts[i]-depts1[i]),"has been changed ",((depts[i]-depts1[i])/depts[i])*100,"%left the job")
        store[i]=((depts[i]-depts1[i])/depts[i])*100

for i in store:
    print(i,store[i])

#we have got the sales report and the % change who left the job


#counting the performance and the promotion thing
countprom=df[df["promotion_last_5years"]==1]
print(len(countprom),"employee got promotion")
#counting the performance and promotion for the people who have left
countprom=df1[df1["promotion_last_5years"]==1]
print(len(countprom),"employee got promotion")

#counting the work performance
countwork=df[df["Work_accident"]==1]
print(len(countwork),"encountered accident")
print(len(df))

#counting the performance and promotion for the people who have left
countwork1=df1[df1["Work_accident"]==1]
print(len(countwork1),"left after an accident")
print(len(df1))

#checking hour count
x=df1["average_montly_hours"]
print(x.mean())
df=df[df["average_montly_hours"]>207]
print(len(df))
df1=df1[df1["average_montly_hours"]>207]
print(len(df1))

#time_spent_company
xy=df1["time_spend_company"]
print(xy.median())
xyu=df[df["time_spend_company"]>4]
print(len(df1[df1["time_spend_company"]>4]))
print(len(xyu))
#fresher drop

plt.figure(figsize=(18,10))
sns.countplot(df1["last_evaluation"])
plt.show()

from sklearn import preprocessing

le = preprocessing.LabelEncoder()

df["result"]=0
df1["result"]=1
df=df.append(df1)

df

le.fit(df["salary"])
df["salary"]=le.transform(df["salary"])
le.fit(df["dept"])
df["dept"]=le.transform(df["dept"])

io=df.corr()
plt.figure(figsize=(72,40))

sns.heatmap(io,cmap="plasma",annot=True)
plt.show()

df
dfio=df[df["dept"]==7]

dfio=dfio[dfio["salary"]==1]
dfio

df.groupby(["dept"])["salary"].value_counts().plot()
plt.show()

sns.pairplot(df)
plt.show()

df1

le.fit(df1["salary"])
df1["salary"]=le.transform(df1["salary"])

le.fit(df1["dept"])
df1["dept"]=le.transform(df1["dept"])

df1

dfcp=df1[:]
del dfcp["Emp ID"]

pocorr=dfcp.corr()

plt.figure(figsize=(18,10))
sns.heatmap(pocorr,annot=True,cmap="plasma")

plt.savefig("check12.png")
plt.show()

print(Counter(df1["number_project"]))

print(Counter(df1["average_montly_hours"]))

print(Counter(df1["dept"]))